# Obfuscated with PyObfuscate
# https://www.github.com/htr-tech
# Time : Sat Feb 11 11:49:19 2023
# -------------------------------
_ = lambda __ : __import__('marshal').loads(__import__('base64').b64decode(__[::-1]));exec((_)(b'='))